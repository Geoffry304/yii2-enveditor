<?php

namespace geoffry304\enveditor\controllers;

use geoffry304\enveditor\components\EnvComponent;
use Yii;
use yii\base\DynamicModel;
use yii\data\ArrayDataProvider;
use yii\helpers\Html;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\web\Response;

class DefaultController extends Controller
{
    public $model;

    public function init()
    {
        $this->model = new DynamicModel(['name', 'value', 'comment', 'isNewRecord']);
        $this->model->addRule(['name', 'value', 'comment'], 'safe');
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
//            'access' => [
//                'class' => \yii\filters\AccessControl::className(),
//                'rules' => [
//                    [
//                        'allow' => true,
//                        'actions' => ['update', 'delete', 'create', 'index', 'backup-view', ''],
//                        'roles' => ['admin']
//                    ],
//                ]
//            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    public function actionIndex()
    {

        $keys = Yii::$app->env->getKeys();
        $data = [];
        $i = 0;
        foreach ($keys as $key => $keyinfo) {
            $data[$i]["name"] = $key;
            foreach ($keyinfo as $name => $info) {
                $data[$i][$name] = $info;
            }
            $i++;
        }
        $backups = Yii::$app->env->getBackups();
        $backupdata = [];
        foreach ($backups as $backup) {
            if (str_contains($backup['filename'], EnvComponent::BACKUP_FILENAME_PREFIX)) {
                $backupdata[] = $backup;
            }
        }


        $dataProvider = new ArrayDataProvider(['allModels' => $data, 'pagination' => false]);
        $backupProvider = new ArrayDataProvider(['allModels' => $backupdata, 'pagination' => false]);
        return $this->render('index', ['dataProvider' => $dataProvider, 'backupProvider' => $backupProvider]);
    }

    public function actionCreate()
    {
        $request = Yii::$app->request;
        $model = $this->model;
        $model->isNewRecord = 1;


        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($request->isGet) {
                return [
                    'title' => "Create env parameter",
                    'content' => $this->renderAjax('create', [
                        'model' => $model,
                    ]),
                    'footer' => Html::button('Close', ['class' => 'btn btn-default pull-left', 'data-dismiss' => "modal"]) .
                        Html::button('Save', ['class' => 'btn btn-primary', 'type' => "submit"])
                ];
            } else if ($model->load($request->post())) {
                Yii::$app->env->setKey($model->name, $model->value, $model->comment);
                if (Yii::$app->env->save()) {
                    return [
                        'forceReload' => '#enveditor-reload-pjax',
                        'forceClose' => true
                    ];
                }
            }
            return [
                'title' => "Create env parameter",
                'content' => $this->renderAjax('create', [
                    'model' => $model,
                ]),
                'footer' => Html::button('Close', ['class' => 'btn btn-default pull-left', 'data-dismiss' => "modal"]) .
                    Html::button('Save', ['class' => 'btn btn-primary', 'type' => "submit"])
            ];
        } else {
            return;
        }
    }

    public function actionUpdate()
    {
        $request = Yii::$app->request;
        $model = $this->model;
        $key = $request->get("key");
        $keyvalues = Yii::$app->env->getKeys([$key]);
        $model->name = $key;
        $model->value = $keyvalues[$key]['value'];
        $model->comment = $keyvalues[$key]['comment'];
        $model->isNewRecord = 0;


        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            if ($request->isGet) {
                return [
                    'title' => "Update env parameter",
                    'content' => $this->renderAjax('update', [
                        'model' => $model,
                    ]),
                    'footer' => Html::button('Close', ['class' => 'btn btn-default pull-left', 'data-dismiss' => "modal"]) .
                        Html::button('Save', ['class' => 'btn btn-primary', 'type' => "submit"])
                ];
            } else if ($model->load($request->post())) {
                Yii::$app->env->setKey($model->name, $model->value, $model->comment);
                if (Yii::$app->env->save()) {
                    return [
                        'forceReload' => '#enveditor-reload-pjax',
                        'forceClose' => true
                    ];
                }
            }
            return [
                'title' => "Update env parameter",
                'content' => $this->renderAjax('update', [
                    'model' => $model,
                ]),
                'footer' => Html::button('Close', ['class' => 'btn btn-default pull-left', 'data-dismiss' => "modal"]) .
                    Html::button('Save', ['class' => 'btn btn-primary', 'type' => "submit"])
            ];
        } else {
            return;
        }
    }

    public function actionDelete()
    {
        $request = Yii::$app->request;
        $key = $request->get("key");
        Yii::$app->env->deleteKey($key);
        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            if (Yii::$app->env->save()) {
                return ['forceClose' => true, 'forceReload' => '#enveditor-reload-pjax'];
            }
        } else {
            /*
            *   Process for non-ajax request
            */
            return $this->redirect(['index']);
        }


    }

    public function actionBackupView()
    {
        $request = Yii::$app->request;
        $file = $request->get("file");
        $path = Yii::$app->env->backupFilePath($file);
        $keysnow = Yii::$app->env->load()->getKeys();
        $keys = Yii::$app->env->load($path)->getKeys();
        $data = [];

        foreach ($keysnow as $key => $now) {
            $data[$key]["nowValue"] = $now['value'];
            $data[$key]["nowComment"] = $now['comment'];
            if (key_exists($key, $keys)) {
                $data[$key]["backupValue"] = $keys[$key]['value'];
                $data[$key]["backupComment"] = $keys[$key]['comment'];
            } else {
                $data[$key]["backupValue"] = "";
                $data[$key]["backupComment"] = "";
            }
        }
//        return "<pre>" . print_r($data,true) . "</pre>";

        if ($request->isAjax) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return [
                'title' => "Backupfile",
                'content' => $this->renderAjax('view', [
                    'keys' => $data,
                ]),
                'footer' => Html::a('Restore', ['backup-restore', 'file' => $file], ['class' => 'btn btn-primary', 'role' => 'modal-remote']) .
                    Html::button('Close', ['class' => 'btn btn-default', 'data-dismiss' => "modal"]) .
                    Html::a('Delete', ['backup-delete', 'file' => $file], ['class' => 'btn btn-danger', 'role' => 'modal-remote',
                        'data-confirm' => false, 'data-method' => false, // for overide yii data api
                        'data-request-method' => 'post',
                        'data-toggle' => 'tooltip',
                        'data-confirm-title' => 'Are you sure?',
                        'data-confirm-message' => 'Are you sure want to delete this item'])
            ];
        } else {
            return $this->render('view', [
                'keys' => $data,
            ]);
        }
    }

    public function actionBackupCreate()
    {
        $request = Yii::$app->request;
        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            Yii::$app->env->backup();
            return ['forceClose' => true, 'forceReload' => '#crud-datatable-backups-pjax'];
        } else {
            /*
            *   Process for non-ajax request
            */
            return $this->redirect(['index']);
        }


    }

    public function actionBackupDelete()
    {
        $request = Yii::$app->request;
        $file = $request->get("file");
        $path = Yii::$app->env->backupFilePath($file);
        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            Yii::$app->env->deleteBackup($path);
            return ['forceClose' => true, 'forceReload' => '#crud-datatable-backups-pjax'];
        } else {
            /*
            *   Process for non-ajax request
            */
            return $this->redirect(['index']);
        }


    }

    public function actionBackupRestore()
    {
        $request = Yii::$app->request;
        $file = $request->get("file");
        $path = Yii::$app->env->backupFilePath($file);
        if ($request->isAjax) {
            /*
            *   Process for ajax request
            */
            Yii::$app->response->format = Response::FORMAT_JSON;
            Yii::$app->env->restore($path);
            return ['forceClose' => true, 'forceReload' => '#enveditor-reload-pjax'];
        } else {
            /*
            *   Process for non-ajax request
            */
            return $this->redirect(['index']);
        }


    }

    public function actionDownload(){
        $path = Yii::$app->env->filePath;
        return $this->download($path);
    }

    public function actionBackupDownload(){
        $request = Yii::$app->request;
        $file = $request->get("file");
        $path = Yii::$app->env->backupFilePath($file);
        return $this->download($path);
    }

    protected function download($path){
        return Yii::$app->response->sendFile($path, null, ["inline" => true]);
    }


}

